"""Initial schema

Revision ID: 682470b5e402
Revises: 
Create Date: 2025-07-03 16:23:16.039807

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '682470b5e402'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('note',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('content', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('solarhub',
    sa.Column('hub_id', sa.BigInteger(), nullable=False),
    sa.Column('what_three_word_location', sa.String(length=255), nullable=True),
    sa.Column('solar_capacity_kw', sa.BigInteger(), nullable=True),
    sa.Column('country', sa.String(length=255), nullable=True),
    sa.Column('latitude', sa.Float(), nullable=True),
    sa.Column('longitude', sa.Float(), nullable=True),
    sa.PrimaryKeyConstraint('hub_id')
    )
    op.create_table('bepppbattery',
    sa.Column('battery_id', sa.BigInteger(), nullable=False),
    sa.Column('hub_id', sa.BigInteger(), nullable=True),
    sa.Column('battery_capacity_wh', sa.BigInteger(), nullable=True),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('battery_secret', sa.String(length=255), nullable=True),
    sa.ForeignKeyConstraint(['hub_id'], ['solarhub.hub_id'], ),
    sa.PrimaryKeyConstraint('battery_id')
    )
    op.create_table('productiveuseequipment',
    sa.Column('pue_id', sa.BigInteger(), nullable=False),
    sa.Column('hub_id', sa.BigInteger(), nullable=True),
    sa.Column('name', sa.String(length=255), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('rental_cost', sa.Float(), nullable=True),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('rental_count', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['hub_id'], ['solarhub.hub_id'], ),
    sa.PrimaryKeyConstraint('pue_id')
    )
    op.create_table('user',
    sa.Column('user_id', sa.BigInteger(), nullable=False),
    sa.Column('Name', sa.String(length=255), nullable=True),
    sa.Column('users_identification_document_number', sa.String(), nullable=True),
    sa.Column('mobile_number', sa.String(length=255), nullable=True),
    sa.Column('address', sa.String(), nullable=True),
    sa.Column('hub_id', sa.BigInteger(), nullable=True),
    sa.Column('user_access_level', sa.String(length=255), nullable=True),
    sa.Column('username', sa.String(length=255), nullable=True),
    sa.Column('password_hash', sa.String(length=255), nullable=True),
    sa.ForeignKeyConstraint(['hub_id'], ['solarhub.hub_id'], ),
    sa.PrimaryKeyConstraint('user_id'),
    sa.UniqueConstraint('username')
    )
    op.create_table('bepppbattery_notes',
    sa.Column('battery_id', sa.BigInteger(), nullable=False),
    sa.Column('note_id', sa.BigInteger(), nullable=False),
    sa.ForeignKeyConstraint(['battery_id'], ['bepppbattery.battery_id'], ),
    sa.ForeignKeyConstraint(['note_id'], ['note.id'], ),
    sa.PrimaryKeyConstraint('battery_id', 'note_id')
    )
    op.create_table('livedata',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('battery_id', sa.BigInteger(), nullable=True),
    sa.Column('state_of_charge', sa.BigInteger(), nullable=True),
    sa.Column('voltage', sa.Float(), nullable=True),
    sa.Column('current_amps', sa.Float(), nullable=True),
    sa.Column('power_watts', sa.Float(), nullable=True),
    sa.Column('time_remaining', sa.BigInteger(), nullable=True),
    sa.Column('temp_battery', sa.Float(), nullable=True),
    sa.Column('amp_hours_consumed', sa.Float(), nullable=True),
    sa.Column('charging_current', sa.Float(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('usb_voltage', sa.Float(), nullable=True),
    sa.Column('usb_power', sa.Float(), nullable=True),
    sa.Column('usb_current', sa.Float(), nullable=True),
    sa.Column('latitude', sa.Float(), nullable=True),
    sa.Column('longitude', sa.Float(), nullable=True),
    sa.Column('altitude', sa.Float(), nullable=True),
    sa.Column('SD_card_storage_remaining', sa.Float(), nullable=True),
    sa.Column('battery_orientation', sa.String(length=255), nullable=True),
    sa.Column('number_GPS_satellites_for_fix', sa.Integer(), nullable=True),
    sa.Column('mobile_signal_strength', sa.Integer(), nullable=True),
    sa.Column('event_type', sa.String(length=255), nullable=True),
    sa.Column('new_battery_cycle', sa.Integer(), nullable=True),
    sa.Column('charger_power', sa.Float(), nullable=True),
    sa.Column('charger_voltage', sa.Float(), nullable=True),
    sa.Column('gps_fix_quality', sa.Integer(), nullable=True),
    sa.Column('charging_enabled', sa.Integer(), nullable=True),
    sa.Column('fan_enabled', sa.Integer(), nullable=True),
    sa.Column('inverter_enabled', sa.Integer(), nullable=True),
    sa.Column('usb_enabled', sa.Integer(), nullable=True),
    sa.Column('stay_awake_state', sa.Integer(), nullable=True),
    sa.Column('tilt_sensor_state', sa.Integer(), nullable=True),
    sa.Column('total_charge_consumed', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['battery_id'], ['bepppbattery.battery_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('pue_notes',
    sa.Column('pue_id', sa.BigInteger(), nullable=False),
    sa.Column('note_id', sa.BigInteger(), nullable=False),
    sa.ForeignKeyConstraint(['note_id'], ['note.id'], ),
    sa.ForeignKeyConstraint(['pue_id'], ['productiveuseequipment.pue_id'], ),
    sa.PrimaryKeyConstraint('pue_id', 'note_id')
    )
    op.create_table('puerental',
    sa.Column('pue_rental_id', sa.BigInteger(), nullable=False),
    sa.Column('pue_id', sa.BigInteger(), nullable=True),
    sa.Column('user_id', sa.BigInteger(), nullable=True),
    sa.Column('timestamp_taken', sa.DateTime(), nullable=True),
    sa.Column('due_back', sa.DateTime(), nullable=True),
    sa.Column('date_returned', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['pue_id'], ['productiveuseequipment.pue_id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.user_id'], ),
    sa.PrimaryKeyConstraint('pue_rental_id')
    )
    op.create_table('rental',
    sa.Column('rentral_id', sa.BigInteger(), nullable=False),
    sa.Column('battery_id', sa.BigInteger(), nullable=True),
    sa.Column('user_id', sa.BigInteger(), nullable=True),
    sa.Column('timestamp_taken', sa.DateTime(), nullable=True),
    sa.Column('due_back', sa.DateTime(), nullable=True),
    sa.Column('date_returned', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['battery_id'], ['bepppbattery.battery_id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.user_id'], ),
    sa.PrimaryKeyConstraint('rentral_id')
    )
    op.create_table('batterypuerental',
    sa.Column('battery_rental_id', sa.BigInteger(), nullable=False),
    sa.Column('pue_rental_id', sa.BigInteger(), nullable=False),
    sa.ForeignKeyConstraint(['battery_rental_id'], ['rental.rentral_id'], ),
    sa.ForeignKeyConstraint(['pue_rental_id'], ['puerental.pue_rental_id'], ),
    sa.PrimaryKeyConstraint('battery_rental_id', 'pue_rental_id')
    )
    op.create_table('puerental_notes',
    sa.Column('pue_rental_id', sa.BigInteger(), nullable=False),
    sa.Column('note_id', sa.BigInteger(), nullable=False),
    sa.ForeignKeyConstraint(['note_id'], ['note.id'], ),
    sa.ForeignKeyConstraint(['pue_rental_id'], ['puerental.pue_rental_id'], ),
    sa.PrimaryKeyConstraint('pue_rental_id', 'note_id')
    )
    op.create_table('rental_notes',
    sa.Column('rental_id', sa.BigInteger(), nullable=False),
    sa.Column('note_id', sa.BigInteger(), nullable=False),
    sa.ForeignKeyConstraint(['note_id'], ['note.id'], ),
    sa.ForeignKeyConstraint(['rental_id'], ['rental.rentral_id'], ),
    sa.PrimaryKeyConstraint('rental_id', 'note_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('rental_notes')
    op.drop_table('puerental_notes')
    op.drop_table('batterypuerental')
    op.drop_table('rental')
    op.drop_table('puerental')
    op.drop_table('pue_notes')
    op.drop_table('livedata')
    op.drop_table('bepppbattery_notes')
    op.drop_table('user')
    op.drop_table('productiveuseequipment')
    op.drop_table('bepppbattery')
    op.drop_table('solarhub')
    op.drop_table('note')
    # ### end Alembic commands ###
