"""add rental return and some missing fields

Revision ID: f8a7397db786
Revises: 1c099858acfb
Create Date: 2025-07-04 16:12:56.623451

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'f8a7397db786'
down_revision: Union[str, Sequence[str], None] = '1c099858acfb'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('rental_pue_item',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('rental_id', sa.BigInteger(), nullable=True),
    sa.Column('pue_id', sa.BigInteger(), nullable=True),
    sa.Column('added_at', sa.DateTime(), nullable=True),
    sa.Column('due_back', sa.DateTime(), nullable=True),
    sa.Column('returned_date', sa.DateTime(), nullable=True),
    sa.Column('rental_cost', sa.Float(), nullable=True),
    sa.Column('deposit_amount', sa.Float(), nullable=True),
    sa.Column('is_returned', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['pue_id'], ['productiveuseequipment.pue_id'], ),
    sa.ForeignKeyConstraint(['rental_id'], ['rental.rentral_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_table('batterypuerental')
    op.drop_table('rental_pue_items')
    op.add_column('bepppbattery', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('bepppbattery', sa.Column('last_data_received', sa.DateTime(), nullable=True))
    op.add_column('note', sa.Column('created_by', sa.BigInteger(), nullable=True))
    op.alter_column('note', 'content',
               existing_type=sa.VARCHAR(),
               type_=sa.Text(),
               existing_nullable=True)
    op.create_foreign_key(None, 'note', 'user', ['created_by'], ['user_id'])
    op.add_column('productiveuseequipment', sa.Column('power_rating_watts', sa.Float(), nullable=True))
    op.add_column('productiveuseequipment', sa.Column('usage_location', sa.Enum('HUB_ONLY', 'BATTERY_ONLY', 'BOTH', name='pueusagelocation'), nullable=True))
    op.add_column('productiveuseequipment', sa.Column('storage_location', sa.String(length=255), nullable=True))
    op.add_column('productiveuseequipment', sa.Column('suggested_cost_per_day', sa.Float(), nullable=True))
    op.add_column('productiveuseequipment', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('productiveuseequipment', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.add_column('productiveuseequipment', sa.Column('is_active', sa.Boolean(), nullable=True))
    op.alter_column('productiveuseequipment', 'name',
               existing_type=sa.VARCHAR(length=255),
               nullable=False)
    op.alter_column('productiveuseequipment', 'description',
               existing_type=sa.VARCHAR(),
               type_=sa.Text(),
               existing_nullable=True)
    op.add_column('puerental', sa.Column('rental_cost', sa.Float(), nullable=True))
    op.add_column('puerental', sa.Column('deposit_amount', sa.Float(), nullable=True))
    op.add_column('puerental', sa.Column('is_active', sa.Boolean(), nullable=True))
    op.add_column('puerental', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('rental', sa.Column('battery_returned_date', sa.DateTime(), nullable=True))
    op.add_column('rental', sa.Column('total_cost', sa.Float(), nullable=True))
    op.add_column('rental', sa.Column('deposit_amount', sa.Float(), nullable=True))
    op.add_column('rental', sa.Column('is_active', sa.Boolean(), nullable=True))
    op.add_column('rental', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.drop_column('rental', 'date_returned')
    op.add_column('solarhub', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('solarhub', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.add_column('user', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('user', sa.Column('last_login', sa.DateTime(), nullable=True))
    op.add_column('user', sa.Column('is_active', sa.Boolean(), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('user', 'is_active')
    op.drop_column('user', 'last_login')
    op.drop_column('user', 'created_at')
    op.drop_column('solarhub', 'updated_at')
    op.drop_column('solarhub', 'created_at')
    op.add_column('rental', sa.Column('date_returned', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.drop_column('rental', 'created_at')
    op.drop_column('rental', 'is_active')
    op.drop_column('rental', 'deposit_amount')
    op.drop_column('rental', 'total_cost')
    op.drop_column('rental', 'battery_returned_date')
    op.drop_column('puerental', 'created_at')
    op.drop_column('puerental', 'is_active')
    op.drop_column('puerental', 'deposit_amount')
    op.drop_column('puerental', 'rental_cost')
    op.alter_column('productiveuseequipment', 'description',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
    op.alter_column('productiveuseequipment', 'name',
               existing_type=sa.VARCHAR(length=255),
               nullable=True)
    op.drop_column('productiveuseequipment', 'is_active')
    op.drop_column('productiveuseequipment', 'updated_at')
    op.drop_column('productiveuseequipment', 'created_at')
    op.drop_column('productiveuseequipment', 'suggested_cost_per_day')
    op.drop_column('productiveuseequipment', 'storage_location')
    op.drop_column('productiveuseequipment', 'usage_location')
    op.drop_column('productiveuseequipment', 'power_rating_watts')
    op.drop_constraint(None, 'note', type_='foreignkey')
    op.alter_column('note', 'content',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
    op.drop_column('note', 'created_by')
    op.drop_column('bepppbattery', 'last_data_received')
    op.drop_column('bepppbattery', 'created_at')
    op.create_table('rental_pue_items',
    sa.Column('rental_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('pue_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('added_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['pue_id'], ['productiveuseequipment.pue_id'], name=op.f('rental_pue_items_pue_id_fkey')),
    sa.ForeignKeyConstraint(['rental_id'], ['rental.rentral_id'], name=op.f('rental_pue_items_rental_id_fkey')),
    sa.PrimaryKeyConstraint('rental_id', 'pue_id', name=op.f('rental_pue_items_pkey'))
    )
    op.create_table('batterypuerental',
    sa.Column('battery_rental_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('pue_rental_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['battery_rental_id'], ['rental.rentral_id'], name=op.f('batterypuerental_battery_rental_id_fkey')),
    sa.ForeignKeyConstraint(['pue_rental_id'], ['puerental.pue_rental_id'], name=op.f('batterypuerental_pue_rental_id_fkey')),
    sa.PrimaryKeyConstraint('battery_rental_id', 'pue_rental_id', name=op.f('batterypuerental_pkey'))
    )
    op.drop_table('rental_pue_item')
    # ### end Alembic commands ###
